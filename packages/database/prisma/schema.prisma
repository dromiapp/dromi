// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id
  displayName String
  email       String @unique
  password    String

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  sessions             Session[]
  workspaceMemberships WorkspaceMember[]
  createdTodos  TodoItem[] @relation("CreatedTodos")
  assignedTodos TodoItem[] @relation("AssignedTodos")
}

model Session {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum Resource {
  WORKSPACE
  TODO
}

model Workspace {
  id          String    @id
  displayName String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  members   WorkspaceMember[]
  todoLists TodoList[]
}

model TodoList {
  id          String    @id
  workspaceId String
  displayName String
  slug        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  workspace Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  items    TodoItem[]
  labels TodoLabel[]

  @@unique([workspaceId, slug])
}

model TodoItem {
  id          String    @id
  listId      String
  title       String
  description String?
  state       TodoState @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  closedAt    DateTime?
  deletedAt   DateTime?
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?

  createdById String
  assigneeId  String?

  list     TodoList       @relation(fields: [listId], references: [id], onDelete: Cascade)
  creator  User          @relation("CreatedTodos", fields: [createdById], references: [id])
  assignee User?         @relation("AssignedTodos", fields: [assigneeId], references: [id])
  labels   TodoLabel[]
}

model TodoLabel {
  id          String   @id
  name        String
  description String?
  listId      String   // Labels belong to a specific list

  list  TodoList    @relation(fields: [listId], references: [id], onDelete: Cascade)
  items TodoItem[]

  @@unique([listId, name])
}

enum TodoState {
  OPEN
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Permission {
  id         String   @id
  resource   Resource
  resourceId String?
  flags      Int      @default(0)
  memberId   String

  member WorkspaceMember @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, resource, resourceId])
}

model WorkspaceMember {
  id          String   @id
  workspaceId String
  userId      String
  isOwner     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions Permission[]
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}
